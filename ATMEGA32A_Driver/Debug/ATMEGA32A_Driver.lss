
ATMEGA32A_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000030a  0000037e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  000003ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001409  00000000  00000000  00000415  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000702  00000000  00000000  0000181e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000466  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c4  00000000  00000000  00002388  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d4  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000044b  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00002a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002fe  000002fe  00000372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.GPIO_PIN_READ_DIR 0000002c  000002a6  000002a6  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.GPIO_DIGITAL_READ 0000002c  000002d2  000002d2  00000346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.GPIO_PIN_DIR 0000005e  00000248  00000248  000002bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.GPIO_PIN_MODE 00000082  000001c6  000001c6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .data.GPIOS_REG 00000008  00800060  00000302  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.main    00000116  000000b0  000000b0  00000124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
   8:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
   c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  10:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  14:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  18:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  1c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  20:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  24:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  28:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  2c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  30:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  34:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  38:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  3c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  40:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  44:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  48:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  4c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  50:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 68       	ori	r16, 0x80	; 128
  58:	00 03       	mulsu	r16, r16
  5a:	02 00       	.word	0x0002	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <_etext>
  a8:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

000002fe <__bad_interrupt>:
 2fe:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.GPIO_PIN_READ_DIR:

000002a6 <GPIO_PIN_READ_DIR>:
	GPIOC,
	GPIOD,
};

PIN_DIR GPIO_PIN_READ_DIR(GPIO_PORTS PORT_NUM,PINS PIN_NUM){
	if(IS_BIT_SET(GPIOS_REG[PORT_NUM] -> DDR . Data ,PIN_NUM)){
 2a6:	e8 2f       	mov	r30, r24
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	e0 5a       	subi	r30, 0xA0	; 160
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	01 90       	ld	r0, Z+
 2b4:	f0 81       	ld	r31, Z
 2b6:	e0 2d       	mov	r30, r0
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <GPIO_PIN_READ_DIR+0x1c>
 2be:	95 95       	asr	r25
 2c0:	87 95       	ror	r24
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <GPIO_PIN_READ_DIR+0x18>
 2c6:	80 ff       	sbrs	r24, 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <GPIO_PIN_READ_DIR+0x28>
		return OUTPUT;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	08 95       	ret
	}
	return INPUT;
 2ce:	80 e0       	ldi	r24, 0x00	; 0
}
 2d0:	08 95       	ret

Disassembly of section .text.GPIO_DIGITAL_READ:

000002d2 <GPIO_DIGITAL_READ>:

PIN_MODE GPIO_DIGITAL_READ(GPIO_PORTS PORT_NUM,PINS PIN_NUM){
	if(IS_BIT_SET(GPIOS_REG[PORT_NUM] -> PIN . Data ,PIN_NUM)){
 2d2:	e8 2f       	mov	r30, r24
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	e0 5a       	subi	r30, 0xA0	; 160
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	01 90       	ld	r0, Z+
 2e0:	f0 81       	ld	r31, Z
 2e2:	e0 2d       	mov	r30, r0
 2e4:	80 81       	ld	r24, Z
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <GPIO_DIGITAL_READ+0x1c>
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <GPIO_DIGITAL_READ+0x18>
 2f2:	80 ff       	sbrs	r24, 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <GPIO_DIGITAL_READ+0x28>
		return HIGH;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	08 95       	ret
	}
	return LOW;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
}
 2fc:	08 95       	ret

Disassembly of section .text.GPIO_PIN_DIR:

00000248 <GPIO_PIN_DIR>:


GPIO_RET GPIO_PIN_DIR(GPIO_PORTS PORT_NUM,PINS PIN_NUM,PIN_DIR DIR){
	switch(DIR){
 248:	44 23       	and	r20, r20
 24a:	19 f0       	breq	.+6      	; 0x252 <GPIO_PIN_DIR+0xa>
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	b1 f0       	breq	.+44     	; 0x27c <GPIO_PIN_DIR+0x34>
 250:	28 c0       	rjmp	.+80     	; 0x2a2 <GPIO_PIN_DIR+0x5a>
		case INPUT:
				CLEAR_BIT(GPIOS_REG[PORT_NUM] -> DDR . Data ,PIN_NUM);
 252:	e8 2f       	mov	r30, r24
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ee 0f       	add	r30, r30
 258:	ff 1f       	adc	r31, r31
 25a:	e0 5a       	subi	r30, 0xA0	; 160
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	01 90       	ld	r0, Z+
 260:	f0 81       	ld	r31, Z
 262:	e0 2d       	mov	r30, r0
 264:	21 81       	ldd	r18, Z+1	; 0x01
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <GPIO_PIN_DIR+0x28>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <GPIO_PIN_DIR+0x24>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	81 83       	std	Z+1, r24	; 0x01
				break;
 27a:	13 c0       	rjmp	.+38     	; 0x2a2 <GPIO_PIN_DIR+0x5a>
		case OUTPUT:
				SET_BIT(GPIOS_REG[PORT_NUM] -> DDR . Data ,PIN_NUM);
 27c:	e8 2f       	mov	r30, r24
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	e0 5a       	subi	r30, 0xA0	; 160
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	01 90       	ld	r0, Z+
 28a:	f0 81       	ld	r31, Z
 28c:	e0 2d       	mov	r30, r0
 28e:	21 81       	ldd	r18, Z+1	; 0x01
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <GPIO_PIN_DIR+0x52>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <GPIO_PIN_DIR+0x4e>
 29e:	82 2b       	or	r24, r18
 2a0:	81 83       	std	Z+1, r24	; 0x01
				break;
		default: break; 
		}
	return RET_OK;
}
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	08 95       	ret

Disassembly of section .text.GPIO_PIN_MODE:

000001c6 <GPIO_PIN_MODE>:

GPIO_RET GPIO_PIN_MODE(GPIO_PORTS PORT_NUM,PINS PIN_NUM,PIN_MODE MODE){
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	c8 2f       	mov	r28, r24
 1ce:	d6 2f       	mov	r29, r22
 1d0:	14 2f       	mov	r17, r20
	if(GPIO_PIN_READ_DIR(PORT_NUM, PIN_NUM) == INPUT){
 1d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <GPIO_PIN_READ_DIR>
 1d6:	88 23       	and	r24, r24
 1d8:	81 f1       	breq	.+96     	; 0x23a <GPIO_PIN_MODE+0x74>
		return RET_NOT_OK;
	}
	switch(MODE){
 1da:	11 23       	and	r17, r17
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <GPIO_PIN_MODE+0x1e>
 1de:	11 30       	cpi	r17, 0x01	; 1
 1e0:	b9 f0       	breq	.+46     	; 0x210 <GPIO_PIN_MODE+0x4a>
 1e2:	2d c0       	rjmp	.+90     	; 0x23e <GPIO_PIN_MODE+0x78>
		case LOW:
				CLEAR_BIT(GPIOS_REG[PORT_NUM] -> PORT . Data,PIN_NUM);
 1e4:	ec 2f       	mov	r30, r28
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	e0 5a       	subi	r30, 0xA0	; 160
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	01 90       	ld	r0, Z+
 1f2:	f0 81       	ld	r31, Z
 1f4:	e0 2d       	mov	r30, r0
 1f6:	22 81       	ldd	r18, Z+2	; 0x02
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <GPIO_PIN_MODE+0x3c>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	da 95       	dec	r29
 204:	e2 f7       	brpl	.-8      	; 0x1fe <GPIO_PIN_MODE+0x38>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	82 83       	std	Z+2, r24	; 0x02
		case HIGH:
				SET_BIT(GPIOS_REG[PORT_NUM] -> PORT . Data,PIN_NUM);
				break;
		default:break;
	}
	return RET_OK;
 20c:	81 e0       	ldi	r24, 0x01	; 1
		return RET_NOT_OK;
	}
	switch(MODE){
		case LOW:
				CLEAR_BIT(GPIOS_REG[PORT_NUM] -> PORT . Data,PIN_NUM);
				break;
 20e:	18 c0       	rjmp	.+48     	; 0x240 <GPIO_PIN_MODE+0x7a>
		case HIGH:
				SET_BIT(GPIOS_REG[PORT_NUM] -> PORT . Data,PIN_NUM);
 210:	ec 2f       	mov	r30, r28
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	e0 5a       	subi	r30, 0xA0	; 160
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	01 90       	ld	r0, Z+
 21e:	f0 81       	ld	r31, Z
 220:	e0 2d       	mov	r30, r0
 222:	22 81       	ldd	r18, Z+2	; 0x02
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <GPIO_PIN_MODE+0x68>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	da 95       	dec	r29
 230:	e2 f7       	brpl	.-8      	; 0x22a <GPIO_PIN_MODE+0x64>
 232:	82 2b       	or	r24, r18
 234:	82 83       	std	Z+2, r24	; 0x02
				break;
		default:break;
	}
	return RET_OK;
 236:	81 e0       	ldi	r24, 0x01	; 1
		case LOW:
				CLEAR_BIT(GPIOS_REG[PORT_NUM] -> PORT . Data,PIN_NUM);
				break;
		case HIGH:
				SET_BIT(GPIOS_REG[PORT_NUM] -> PORT . Data,PIN_NUM);
				break;
 238:	03 c0       	rjmp	.+6      	; 0x240 <GPIO_PIN_MODE+0x7a>
	return RET_OK;
}

GPIO_RET GPIO_PIN_MODE(GPIO_PORTS PORT_NUM,PINS PIN_NUM,PIN_MODE MODE){
	if(GPIO_PIN_READ_DIR(PORT_NUM, PIN_NUM) == INPUT){
		return RET_NOT_OK;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	01 c0       	rjmp	.+2      	; 0x240 <GPIO_PIN_MODE+0x7a>
		case HIGH:
				SET_BIT(GPIOS_REG[PORT_NUM] -> PORT . Data,PIN_NUM);
				break;
		default:break;
	}
	return RET_OK;
 23e:	81 e0       	ldi	r24, 0x01	; 1
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	08 95       	ret

Disassembly of section .text.main:

000000b0 <main>:
#include "GPIO.h"
#include <util/delay.h>

int main(void)
{	
	GPIO_PIN_DIR(PORTA,PIN0,OUTPUT);
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_PIN_DIR>
	GPIO_PIN_DIR(PORTA,PIN1,OUTPUT);
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_PIN_DIR>
	GPIO_PIN_DIR(PORTA,PIN2,OUTPUT);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_PIN_DIR>
	GPIO_PIN_DIR(PORTD,PIN0,INPUT);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_PIN_DIR>
	GPIO_PIN_DIR(PORTD,PIN1,INPUT);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_PIN_DIR>
	GPIO_PIN_DIR(PORTD,PIN2,INPUT);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 24 01 	call	0x248	; 0x248 <GPIO_PIN_DIR>
    while(1)
    {
		if(GPIO_DIGITAL_READ(PORTD,PIN0) == HIGH){
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_DIGITAL_READ>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	c9 f4       	brne	.+50     	; 0x12a <main+0x7a>
			GPIO_PIN_MODE(PORTA,PIN0,HIGH);
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
			GPIO_PIN_MODE(PORTA,PIN1,LOW);
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
			GPIO_PIN_MODE(PORTA,PIN2,LOW);	
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	62 e0       	ldi	r22, 0x02	; 2
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f e7       	ldi	r18, 0x7F	; 127
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x6c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x76>
 126:	00 00       	nop
 128:	e1 cf       	rjmp	.-62     	; 0xec <main+0x3c>
			_delay_ms(400);
		}
		else if(GPIO_DIGITAL_READ(PORTD,PIN1) == HIGH){
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_DIGITAL_READ>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	c9 f4       	brne	.+50     	; 0x168 <main+0xb8>
			GPIO_PIN_MODE(PORTA,PIN0,LOW);
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
			GPIO_PIN_MODE(PORTA,PIN1,HIGH);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
			GPIO_PIN_MODE(PORTA,PIN2,LOW);	
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
 154:	2f e7       	ldi	r18, 0x7F	; 127
 156:	88 e3       	ldi	r24, 0x38	; 56
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0xaa>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xb4>
 164:	00 00       	nop
 166:	c2 cf       	rjmp	.-124    	; 0xec <main+0x3c>
			_delay_ms(400);
		}
		else if(GPIO_DIGITAL_READ(PORTD,PIN2) == HIGH){
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_DIGITAL_READ>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	c9 f4       	brne	.+50     	; 0x1a6 <main+0xf6>
			GPIO_PIN_MODE(PORTA,PIN0,LOW);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
			GPIO_PIN_MODE(PORTA,PIN1,LOW);
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
			GPIO_PIN_MODE(PORTA,PIN2,HIGH);	
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
 192:	2f e7       	ldi	r18, 0x7F	; 127
 194:	88 e3       	ldi	r24, 0x38	; 56
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0xe8>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0xf2>
 1a2:	00 00       	nop
 1a4:	a3 cf       	rjmp	.-186    	; 0xec <main+0x3c>
			_delay_ms(400);
		}
		else{
		GPIO_PIN_MODE(PORTA,PIN0,LOW);
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
		GPIO_PIN_MODE(PORTA,PIN1,LOW);
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
		GPIO_PIN_MODE(PORTA,PIN2,LOW);
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GPIO_PIN_MODE>
 1c4:	93 cf       	rjmp	.-218    	; 0xec <main+0x3c>
